<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <Platforms>AnyCPU;x64;x86</Platforms>
  </PropertyGroup>

  <PropertyGroup>
    <UABEADir>$(SolutionDir)UABEA\</UABEADir>
  </PropertyGroup>

  <PropertyGroup>
    <TexToolWrapDir>$(UABEADir)TexToolWrap\</TexToolWrapDir>
  </PropertyGroup>

  <PropertyGroup>
    <TexturePluginImportDir>$(UABEADir)TexturePlugin\</TexturePluginImportDir>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(TexturePluginImportDir)PInvoke.cs" Link="PInvoke.cs" />
    <Compile Include="$(TexturePluginImportDir)TextureEncoderDecoder.cs" Link="TextureEncoderDecoder.cs" />
    <Compile Include="$(TexturePluginImportDir)TextureImportExport.cs" Link="TextureImportExport.cs" />
  </ItemGroup>

  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AssetsTools.NET" Version="2.0.9" />
    <PackageReference Include="SixLabors.ImageSharp" Version="2.1.3" />
  </ItemGroup>

  <PropertyGroup>
    <NativeConfig>unknown</NativeConfig>
    <Authors>nesrak1</Authors>
    <Description>TexturePlugin without dependency on Unity Asset Bundle Replacer Avalonia (UABEA) written by nesrak1.</Description>
    <PackageProjectUrl>https://github.com/nesrak1/UABEA</PackageProjectUrl>
    <RepositoryUrl>https://github.com/nesrak1/UABEA.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>Plugin, .NET, Texture</PackageTags>
    <PackageReleaseNotes>- Imported code to project</PackageReleaseNotes>
    <NeutralLanguage>en-US</NeutralLanguage>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <NoWarn />
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningsAsErrors />
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <NoWarn />
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningsAsErrors />
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x86'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <NoWarn />
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningsAsErrors />
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn />
    <DefineConstants />
    <DebugType>none</DebugType>
    <DebugSymbols>false</DebugSymbols>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <NoWarn />
    <DefineConstants />
    <DebugType>none</DebugType>
    <DebugSymbols>false</DebugSymbols>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x86'">
    <NoWarn />
    <DefineConstants />
    <DebugType>none</DebugType>
    <DebugSymbols>false</DebugSymbols>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
  </PropertyGroup>

  <!-- this will only execute once while building the solution -->
  <!-- this should set NativeConfig with the config, but  -->
  <!-- the actual copying has to be copy and pasted to work    -->
  <!-- with msbuild since targets can only execute once        -->
  <Target Name="BuildNativeAndSetConfig">
    <!-- g++ doesn't build the same as $(Platform) so check the os's platform instead -->
    <Exec Condition="$([MSBuild]::IsOsPlatform(Linux))" Command="uname -m" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="LinuxUnameM" />
    </Exec>

    <!-- anycpu will build x64, I have to choose one or another -->
    <!-- and I figure most people have 64bit computers          -->
    <PropertyGroup Condition="$([MSBuild]::IsOsPlatform(Windows)) AND ('$(Platform)' == 'x64' OR '$(Platform)' == 'AnyCPU')">
      <NativeConfig>win-x64</NativeConfig>
      <TexToolWrapBinDir>$(TexToolWrapDir)bin\x64\Release\TexToolWrap.dll</TexToolWrapBinDir>
      <PVRTexToolBinDir>$(TexToolWrapDir)PVRTexLib\Windows_x86_64\PVRTexLib.dll</PVRTexToolBinDir>
      <ISPCBinDir>$(TexToolWrapDir)ispc\win64\ispc_texcomp.dll</ISPCBinDir>
      <CrunchBinDir>$(TexToolWrapDir)crunch\win64\crnlib.dll</CrunchBinDir>
    </PropertyGroup>
    <PropertyGroup Condition="$([MSBuild]::IsOsPlatform(Windows)) AND '$(Platform)' == 'x86'">
      <NativeConfig>win-x86</NativeConfig>
      <TexToolWrapBinDir>$(TexToolWrapDir)bin\Win32\Release\TexToolWrap.dll</TexToolWrapBinDir>
      <PVRTexToolBinDir>$(TexToolWrapDir)PVRTexLib\Windows_x86_32\PVRTexLib.dll</PVRTexToolBinDir>
      <ISPCBinDir>$(TexToolWrapDir)ispc\win32\ispc_texcomp.dll</ISPCBinDir>
      <CrunchBinDir>$(TexToolWrapDir)crunch\win32\crnlib.dll</CrunchBinDir>
    </PropertyGroup>
    <PropertyGroup Condition="$([MSBuild]::IsOsPlatform(Linux)) AND '$(LinuxUnameM)' == 'x86_64'">
      <NativeConfig>linux-x64</NativeConfig>
      <TexToolWrapBinDir>$(TexToolWrapDir)libtextoolwrap.so</TexToolWrapBinDir>
      <PVRTexToolBinDir>$(TexToolWrapDir)PVRTexLib\Linux_x86_64\libPVRTexLib.so</PVRTexToolBinDir>
      <ISPCBinDir>$(TexToolWrapDir)ispc\linux64\libispc_texcomp.so</ISPCBinDir>
      <CrunchBinDir>$(TexToolWrapDir)crunch\linux64\libcrnlib.so</CrunchBinDir>
    </PropertyGroup>
    <PropertyGroup Condition="$([MSBuild]::IsOsPlatform(Linux)) AND ('$(LinuxUnameM)' == 'i386' OR '$(Platform)' == 'i686')">
      <NativeConfig>linux-x86</NativeConfig>
      <TexToolWrapBinDir>$(TexToolWrapDir)libtextoolwrap.so</TexToolWrapBinDir>
      <PVRTexToolBinDir>$(TexToolWrapDir)PVRTexLib\Linux_x86_32\libPVRTexLib.so</PVRTexToolBinDir>
      <ISPCBinDir>$(TexToolWrapDir)ispc\linux32\libispc_texcomp.so</ISPCBinDir>
      <CrunchBinDir>$(TexToolWrapDir)crunch\linux32\libcrnlib.so</CrunchBinDir>
    </PropertyGroup>

    <!-- build textoolwrap for windows with vcxproj -->
    <MSBuild Condition="'$(NativeConfig)' == 'win-x64'" Projects="$(TexToolWrapDir)TexToolWrap.vcxproj" Targets="Build" Properties="Configuration=Release;Platform=x64" />
    <MSBuild Condition="'$(NativeConfig)' == 'win-x86'" Projects="$(TexToolWrapDir)TexToolWrap.vcxproj" Targets="Build" Properties="Configuration=Release;Platform=Win32" />

    <!-- build textoolwrap for linux with make -->
    <Exec Condition="'$(NativeConfig)' == 'linux-x64' OR '$(NativeConfig)' == 'linux-x86'" Command="make" WorkingDirectory="$(TexToolWrapDir)" />

    <Message Importance="High" Text="TEXTUREPLUGIN BUILD INFO" />
    <Message Importance="High" Text="   ON WINDOWS: $([MSBuild]::IsOsPlatform(Windows))" />
    <Message Importance="High" Text="   PLATFORM: $(Platform)" />
    <Message Importance="High" Text="   CONFIG: $(NativeConfig)" />
  </Target>

  <!-- there seems to be no flag for checking if building  -->
  <!-- or publishing, so we just have two separate targets -->

  <!-- build event -->
  <Target Name="CopyLibrariesBuild" DependsOnTargets="BuildNativeAndSetConfig" AfterTargets="AfterBuild" Condition="'$(UABEADir)' != '*Undefined*'">
    <PropertyGroup>
      <BinDir>$(SolutionDir)UnityAssetReplacer\$(OutputPath)</BinDir>
    </PropertyGroup>

    <!-- copy textoolwrap and deps -->
    <Copy SourceFiles="$(TexToolWrapBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(PVRTexToolBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(ISPCBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(CrunchBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
  </Target>

  <!-- publish event -->
  <Target Name="CopyLibrariesPublish" DependsOnTargets="BuildNativeAndSetConfig" AfterTargets="Publish" Condition="'$(SolutionDir)' != '*Undefined*'">
    <PropertyGroup>
      <BinDir>$(SolutionDir)UnityAssetReplacer\$(PublishDir)</BinDir>
    </PropertyGroup>

    <!-- copy textoolwrap and deps -->
    <Copy SourceFiles="$(TexToolWrapBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(PVRTexToolBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(ISPCBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(CrunchBinDir)" DestinationFolder="$(BinDir)" ContinueOnError="true" />
  </Target>

</Project>
